# -*- coding: utf-8 -*-
"""ML-Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15gqLDa4R9jy1x8tLia4NRqkJAUYr6zOR

# New Section
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
plt.switch_backend('Agg')
get_ipython().run_line_magic('matplotlib', 'inline')

import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, auc
sns.set(style="whitegrid")

train_df = pd.read_csv('/content/train_u6lujuX_CVtuZ9i.csv', encoding='ascii')

test_df = pd.read_csv('/content/test_Y3wMUE5_7gLdaTN.csv', encoding='ascii')

print('Train dataset shape:', train_df.shape)
print('Test dataset shape:', test_df.shape)
train_df.head()

train_df.info()
print('Missing values in Training Data:')
print(train_df.isnull().sum())

num_features = ['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History']
cat_features = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area', 'Loan_Status']

for feature in num_features:
    if train_df[feature].isnull().sum() > 0:
        median_value = train_df[feature].median()
        train_df[feature].fillna(median_value, inplace=True)
        if feature in test_df.columns:
            test_df[feature].fillna(median_value, inplace=True)
for feature in cat_features:
    if train_df[feature].isnull().sum() > 0:
        mode_value = train_df[feature].mode()[0]
        train_df[feature].fillna(mode_value, inplace=True)

        if feature in test_df.columns:
            test_df[feature].fillna(mode_value, inplace=True)
print('Missing values after imputation (Train):')
print(train_df.isnull().sum())

numeric_df = train_df.select_dtypes(include=[np.number])

if numeric_df.shape[1] >= 4:
    plt.figure(figsize=(10, 8))
    corr = numeric_df.corr()
    sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm')
    plt.title('Correlation Heatmap for Numeric Features')
    plt.show()
else:
    print('Not enough numeric features for a correlation heatmap.')
sns.pairplot(numeric_df)
plt.suptitle('Pair Plot of Numeric Features', y=1.02)
plt.show()

plt.figure(figsize=(8, 6))
sns.histplot(train_df['ApplicantIncome'], kde=True)
plt.title('Distribution of Applicant Income')
plt.xlabel('Applicant Income')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(6, 4))
sns.countplot(x=train_df['Loan_Status'], palette='viridis')
plt.title('Loan Status Count')
plt.xlabel('Loan Status')
plt.ylabel('Count')
plt.show()

train_df['TotalIncome'] = train_df['ApplicantIncome'] + train_df['CoapplicantIncome']
if 'CoapplicantIncome' in test_df.columns:
    test_df['TotalIncome'] = test_df['ApplicantIncome'] + test_df['CoapplicantIncome']



categorical_features = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area']


train_df_encoded = pd.get_dummies(train_df, columns=categorical_features, drop_first=True)


test_df_encoded = pd.get_dummies(test_df, columns=categorical_features, drop_first=True)

test_df_encoded = test_df_encoded.reindex(columns = train_df_encoded.columns.drop('Loan_Status'), fill_value=0)

train_df_encoded.head()

X = train_df_encoded.drop(['Loan_ID', 'Loan_Status'], axis=1)
y = train_df_encoded['Loan_Status'].map({'Y': 1, 'N': 0})

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)
y_pred = model.predict(X_val)
accuracy = accuracy_score(y_val, y_pred)
print('Validation Accuracy:', accuracy)

cm = confusion_matrix(y_val, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()
y_proba = model.predict_proba(X_val)[:, 1]
fpr, tpr, thresholds = roc_curve(y_val, y_proba)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, label=f'ROC Curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()

test_features = test_df_encoded.drop(['Loan_ID'], axis=1)
test_predictions = model.predict(test_features)
submission = pd.DataFrame({
    'Loan_ID': test_df_encoded['Loan_ID'] if 'Loan_ID' in test_df_encoded.columns else test_df['Loan_ID'],
    'Loan_Status': np.where(test_predictions==1, 'Y', 'N')
})
submission.head()

